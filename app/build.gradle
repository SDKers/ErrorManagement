def cfg = rootProject.ext
apply plugin: 'com.android.application'

android {
    compileSdk cfg.android.compileSdk
    compileSdkVersion compileSdk
    buildToolsVersion cfg.android.buildToolsVersion
    ndkVersion cfg.android.ndkVersion
//    ndkVersion '23.0.7599858'

    defaultConfig {
        applicationId cfg.android.applicationId
        minSdk cfg.android.minSdk
        targetSdk cfg.android.targetSdk
        versionCode cfg.android.versionCode
        versionName cfg.android.versionName

        testInstrumentationRunner cfg.android.AndroidJUnitRunner
        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi' , 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
    }
//    sourceSets {
//        main.jniLibs.strDirs = ['libs']
//    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dexOptions {
        preDexLibraries false
        maxProcessCount 8
        javaMaxHeapSize "4g"
    }
    aaptOptions {
        cruncherEnabled = false
        useNewCruncher = false
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        warningsAsErrors false
        disable "UnusedResources"
        textOutput "stdout"
        textReport false
        disable 'RestrictedApi'
    }


}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

dependencies {
    cfg.libs.each { k, v -> implementation v }
//        cfg.statictic.each { k, v -> implementation v }
    cfg.test.each { k, v -> testImplementation v }
    cfg.androidTest.each { k, v -> androidTestImplementation v }

    implementation fileTree(dir: 'libs', include: ['*.aar'])
}

