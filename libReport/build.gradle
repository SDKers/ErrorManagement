def cfg = rootProject.ext
apply plugin: 'com.android.library'
apply plugin: 'com.kezong.fat-aar'

def version="v1.2"
android {
    compileSdk 32
    compileSdkVersion compileSdk
    buildToolsVersion '31.0.0'
    ndkVersion '23.0.7599858'

    defaultConfig {
        minSdk 15
        targetSdk 32
        versionCode 3
        versionName "${version}"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        defaultConfig {
            ndk {
                // 设置支持的SO库架构
                abiFilters 'armeabi', 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
            }
        }

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dexOptions {
        preDexLibraries false
        maxProcessCount 8
        javaMaxHeapSize "4g"
    }
    aaptOptions {
        cruncherEnabled = false
        useNewCruncher = false
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        warningsAsErrors false
        disable "UnusedResources"
        textOutput "stdout"
        textReport false
        disable 'RestrictedApi'
    }



}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}


task copyAar(type: Copy) {
    from('build/outputs/aar/error_managment_debug.aar')
    into "../app/libs/"
}
dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])

    cfg.statictic.each { k, v -> embed v }
    cfg.test.each { k, v -> implementation v }
    cfg.androidTest.each { k, v -> implementation v }
}

assemble.doLast {
    android.libraryVariants.all { variant ->
//    // 更新输出aar包的名称
//    variant.outputs.all {
//        print "================================================\r\n"
//        print "variant.buildType.name :"+variant.buildType.name+"\r\n"
//        print "variant.name :"+variant.name+"\r\n"
//        outputFileName = "error_managment" + "_" + variant.buildType.name  + "_${version}.aar"
//    }
        // copy file to ${base_dir}/release
        if (variant.name == "release") {
            variant.outputs.each { output ->
                File originFile = output.outputFile
//            print "originFile: "+originFile.getAbsolutePath()+"\r\n"
//            print "================================================\r\n"
//            println "release aar path: "+originFile.absolutePath+"\r\n"
                copy {
                    from originFile
                    into "${rootDir}/release"
                    rename(originFile.name, "report_release_${version}.aar")
                }
            }
        }
    }
}